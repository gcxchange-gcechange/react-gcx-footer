trigger:
  branches: 
    include: 
      - '*'

#variables:
#  - group: office365credentials 

stages:
- stage: Build
  dependsOn: []
  jobs:
############################################################
## installs: npm dependencies 
############################################################
    - job: build_package 
      displayName: SPFx build and packaging
      steps:
        - script: npm install
          displayName: Install npm dependencies 
############################################################
## executes: gulp build
############################################################
        - task: gulp@0
          displayName: SPFx build
          inputs:
            targets: build
############################################################
## executes: gulp bundle --ship 
############################################################
        - task: gulp@0
          displayName: SPFx bundle 
          inputs:
            targets: bundle
            arguments: --ship
############################################################
## executes: gulp package-solution --ship
############################################################
        - task: gulp@0
          displayName: SPFx package solution 
          inputs:
            targets: package-solution 
            arguments: --ship
############################################################
## evaluates: the name of the generated *.sppkg package
############################################################
        - script: |
            CMD_GET_SPPKG_NAME=$(find . -name '*.sppkg' -exec basename {} \;)
            echo "##vso[task.setvariable variable=SpPkgFilename;isOutput=true]${CMD_GET_SPPKG_NAME}"
          displayName: Get generated *.sppkg filename 
          name: GetSharePointPackage
############################################################
## publishes: *.sppkg as a build artifact 
############################################################
        - task: PublishBuildArtifacts@1
          displayName: Publish SharePoint Package (*.sppkg)
          inputs:
            targetPath: $(Build.Repository.LocalPath)/sharepoint/solution/$(GetSharePointPackage.SpPkgFilename)
            artifactName: spfx-package

- stage: Test
  dependsOn: []
  jobs:
############################################################
## installs: npm dependencies 
############################################################
    - job: run_tests
      displayName: Install npm, haibun, and test dependencies 
      steps:
        - script: npm install 
          displayName: Install npm dependencies 
############################################################
## executes: gulp build
############################################################
        - task: gulp@0
          displayName: SPFx build
          inputs:
            targets: build
############################################################
## executes: tests
############################################################
        - script: npm run test
          displayName: Run test scripts
          continueOnError: true 
############################################################
## publishes: code coverage results to the pipeline run 
############################################################
        - task: PublishCodeCoverageResults@1
          displayName: Publish Code Coverage Results 
          inputs:
            codecoverageTool: cobertura 
            summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/*coverage.xml'
############################################################
## publishes: test results using junit tests to the pipeline run
############################################################
        - task: PublishTestResults@2
          displayName: Publish Test Results
          inputs:
            testResultsFormat: JUnit
            testResultsFiles: '**/junit.xml'
            failTaskOnFailedTests: true

- stage: Deploy_Development 
  dependsOn:
    - Build
    - Test 
  jobs:
    - deployment: deploy_dev_sppkg
      displayName: Deploy to Dev Environment 
      environment: Development 
      strategy: 
        runOnce:
          deploy:
            steps:
############################################################
## installs: Office M365 CLI
############################################################
              - script: sudo npm install --global @pnp/office365-cli
                displayName: Install OfficeM365 CLI
############################################################
## logs in: Office M365 CLI
############################################################
              - script: o365 login https://devgcx.sharepoint.com/ --authType password --userName $(AdminUserLogin) --password $(AdminUserPassword)
                displayName: Login to OfficeM365
############################################################
## downloads: the previously built artifact package *.sppkg
############################################################
              - task: DownloadPipelineArtifact@2
                displayName: Download SharePoint Package (*.sppkg)
                inputs:
                  buildType: current
                  artifactName: spfx-package
############################################################
## determines: the name of generated and previously built artifact package *.sppkg
############################################################
              - script: |
                  CMD_GET_SPPKG_NAME=$(find $(Pipeline.Workspace)/spfx-package -name '*.sppkg' -exec basename {} \;)
                  echo "##vso[task.setvariable variable=SpPkgFilename;isOutput=true]${CMD_GET_SPPKG_NAME}"
                displayName: Get generated *.sppkg filename 
                name: GetSharePointPackage
############################################################
## uploads: the *.sppkg package to the app-catalog
############################################################
              - script: o365 spo app add --filepath "$(Pipeline.Workspace)/spfx-package/$(GetSharePointPackage.SpPkgFilename)" --appCatalogUrl https://devgcx.sharepoint.com/sites/appcatalog/_layouts/15/tenantAppCatalog.aspx/manageApps --scope sitecollection --overwrite --skipFeatureDeployment
                displayName: Upload SharePoint package to the App Catalog
############################################################
## deploys: the *.sppkg package to the app-catalog
############################################################
              - script: o365 spo app deploy --name $(GetSharePointPackage.SpPkgFilename) --appCatalogUrl https://devgcx.sharepoint.com/sites/appcatalog/_layouts/15/tenantAppCatalog.aspx/manageApps --scope sitecollection --skipFeatureDeployment
                displayName: Deploy SharePoint package to the App Catalog